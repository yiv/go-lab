// Code generated by protoc-gen-go. DO NOT EDIT.
// source: game.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	game.proto

It has these top-level messages:
	Frame
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 双向流包
type Frame struct {
	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *Frame) Reset()                    { *m = Frame{} }
func (m *Frame) String() string            { return proto.CompactTextString(m) }
func (*Frame) ProtoMessage()               {}
func (*Frame) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Frame) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func init() {
	proto.RegisterType((*Frame)(nil), "pb.Frame")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GMService service

type GMServiceClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (GMService_StreamClient, error)
}

type gMServiceClient struct {
	cc *grpc.ClientConn
}

func NewGMServiceClient(cc *grpc.ClientConn) GMServiceClient {
	return &gMServiceClient{cc}
}

func (c *gMServiceClient) Stream(ctx context.Context, opts ...grpc.CallOption) (GMService_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GMService_serviceDesc.Streams[0], c.cc, "/pb.GMService/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &gMServiceStreamClient{stream}
	return x, nil
}

type GMService_StreamClient interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ClientStream
}

type gMServiceStreamClient struct {
	grpc.ClientStream
}

func (x *gMServiceStreamClient) Send(m *Frame) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gMServiceStreamClient) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GMService service

type GMServiceServer interface {
	Stream(GMService_StreamServer) error
}

func RegisterGMServiceServer(s *grpc.Server, srv GMServiceServer) {
	s.RegisterService(&_GMService_serviceDesc, srv)
}

func _GMService_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GMServiceServer).Stream(&gMServiceStreamServer{stream})
}

type GMService_StreamServer interface {
	Send(*Frame) error
	Recv() (*Frame, error)
	grpc.ServerStream
}

type gMServiceStreamServer struct {
	grpc.ServerStream
}

func (x *gMServiceStreamServer) Send(m *Frame) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gMServiceStreamServer) Recv() (*Frame, error) {
	m := new(Frame)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GMService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GMService",
	HandlerType: (*GMServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _GMService_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "game.proto",
}

func init() { proto.RegisterFile("game.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 112 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4f, 0xcc, 0x4d,
	0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe4, 0x62, 0x75, 0x2b,
	0x4a, 0xcc, 0x4d, 0x15, 0x92, 0xe0, 0x62, 0x2f, 0x48, 0xac, 0xcc, 0xc9, 0x4f, 0x4c, 0x91, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x71, 0x8d, 0xf4, 0xb9, 0x38, 0xdd, 0x7d, 0x83, 0x53, 0x8b,
	0xca, 0x32, 0x93, 0x53, 0x85, 0x94, 0xb8, 0xd8, 0x82, 0x4b, 0x8a, 0x52, 0x13, 0x73, 0x85, 0x38,
	0xf5, 0x0a, 0x92, 0xf4, 0xc0, 0x7a, 0xa5, 0x10, 0x4c, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0,
	0xf1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7d, 0x81, 0xce, 0x56, 0x6c, 0x00, 0x00, 0x00,
}
